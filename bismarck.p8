pico-8 cartridge // http://www.pico-8.com
version 29
__lua__
-- last stand of the bismarck
-- by @apa64
--  v. 0.3-SNAPSHOT
-- with tinyecs 1.1 by @katrinakitten https://www.lexaloffle.com/bbs/?tid=39021

--[[ MIT License

copyright (c) 2020 antti ollilainen

permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "software"), to deal
in the software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the software, and to permit persons to whom the software is
furnished to do so, subject to the following conditions:

the above copyright notice and this permission notice shall be included in all
copies or substantial portions of the software.

the software is provided "as is", without warranty of any kind, express or
implied, including but not limited to the warranties of merchantability,
fitness for a particular purpose and noninfringement. in no event shall the
authors or copyright holders be liable for any claim, damages or other
liability, whether in an action of contract, tort or otherwise, arising from,
out of or in connection with the software or the use or other dealings in the
software.
--]]
#include tinyecs-1.1.lua

-- master container of entities
ents = {}
-- debug mode on/off
debug = false
-- sounds
sound_explosion = 0
sound_shot = 1

-- ########### special functions #############################################

function _init()
  -- create entities
  --local e_bm = mk_bm()
  local e_dstr1 = mk_dstr()
  local e_dstr2 = mk_dstr()
  e_sight = mk_sight()
  -- store ents in master table
  --add(ents, e_bm)
  add(ents, e_dstr1)
  add(ents, e_dstr2)
  add(ents, e_sight)
end

function _update()
  -- run systems
  s_control(ents)
  s_shoot(ents)
  s_mvtrack(ents)
  s_mvbullet(ents)
end

function _draw()
  cls(1)
  map()
  print_xcenter("last stand of the bismarck", 2, 13)
  print_xcenter("0000 lives lost", 122, 5)

  -- draw bm
  spr(16, 60, 60)
  spr(32, 60, 68)

  -- run draw systems
  s_draw(ents)
  s_drawbullet(ents)
  
  if (debug) then
    print("x:"..e_sight.pos.x, 86, 0, 14)
    print("y:"..e_sight.pos.y, 109, 0, 14)
    print("dbg:"..(debug and 't' or 'f'), 108, 6, 14)
  end
end

-->8
-- #################### entities #############################################

-- bismarck
--[[
function mk_bm()
  local e = ent()
  e += c_pos(63, 63)
  e += c_appearance(16, 8, 8)
  return e
end
]]--

-- a destroyer
function mk_dstr()
  local e = ent()
  e += c_pos(20, 20)
  e += c_appearance(3, 5, 8)
  e += c_mvtrack()
  return e
end

-- gunsight
function mk_sight()
  local e = ent()
  e += c_pos(100, 100)
  e += c_appearance(48, 7, 7)
  e += c_control(2)
  return e
end

-- gun bullet
-- create animated bullet
function mk_bullet(x0, y0, x1, y1)
  local e = ent()
  e += c_pos(x0, y0)
  e += c_targetpos(x1, y1)
  e += c_appearance(49, 3, 3)
  return e
end
-->8
-- ################## components #############################################

-- x,y position.
c_pos = function(x, y)
  return cmp("pos",
    { x = x, y = y })
end

c_targetpos = function(x, y)
  return cmp("targetpos",
    { x = x, y = y })
end

-- has drawable with size.
c_appearance = function(sprite, w, h)
  w = w or 8
  h = h or 8
  return cmp("appearance",
    { sprite = sprite,
      w = w,
      h = h })
end

-- controllable tag.
c_control = function(speed)
  speed = speed or 1
  return cmp("control",
    {
      speed = speed
    })
end

-- movement track params
c_mvtrack = function(params)
  return cmp("mvtrack",
    {
      t = 0,
      wait = 0.05,
      speed = 1,
      r = 55,
      angle = 0
    })
end

-- bullet trajectory
c_line = function(x0, y0, x1, y1)
  return cmp("line", {
    x0 = x0,
    y0 = y0,
    x1 = x1,
    y1 = y1
  })
end

-->8
-- ##################### systems #############################################

-- move along track
-- see this for anim: https://mboffin.itch.io/pico8-simple-animation
s_mvtrack = sys({"pos", "mvtrack"},
function(e)
  -- TODO: rewrite
  originx = 63
  originy = 63
  if (t() - e.mvtrack.t > e.mvtrack.wait) then
    --dstr1.pos.x = (dstr1.pos.x + 1) % 128
    e.mvtrack.t = t()
    --moves along track
    e.mvtrack.angle += e.mvtrack.speed
    e.pos.x = originx + e.mvtrack.r * cos(e.mvtrack.angle/360)
    e.pos.y = originy + e.mvtrack.r * sin(e.mvtrack.angle/360)
    if e.mvtrack.angle>360 then e.mvtrack.angle=0
    elseif e.mvtrack.angle<0 then e.mvtrack.angle=360
    end
  end
end)

-- gunsight control system.
s_control = sys({"control", "pos", "appearance"},
function(e)
  local newx = e.pos.x
  local newy = e.pos.y
  if (btn(0)) newx -= e.control.speed
  if (btn(1)) newx += e.control.speed
  if (btn(2)) newy -= e.control.speed
  if (btn(3)) newy += e.control.speed
  -- world borders
  e.pos.x = mid(0, newx, 127 - e.appearance.w + 1)
  e.pos.y = mid(0, newy, 127 - e.appearance.h + 1)
end)

-- shoot to where the sight is
s_shoot = sys({"control", "pos", "appearance"},
function(e)
  local target_x = 0
  local target_y = 0
  -- O
  if (btnp(4)) then
    -- TODO check if can shoot
    local bm_x = 63
    local bm_y = 63
    -- sight center
    target_x = e.pos.x + (e.appearance.w/2)
    target_y = e.pos.y + (e.appearance.h/2)
    local e_bullet = mk_bullet(bm_x, bm_y, target_x, target_y)
    add(ents, e_bullet)
    sfx(sound_shot)
  end
  -- X
  if (btnp(5)) then
    debug = not debug
  end
end)

-- move bullet 1 step from start to end
s_mvbullet = sys({"pos", "targetpos"},
function(e)
  if (e.pos.x == e.targetpos.x or e.pos.y == e.targetpos.y) then
    --    or e.pos.x < 0 or e.pos.x > 127 or e.pos.y < 0 or e.pos.y > 127) then
    del(ents, e)
  end

  -- collision detection
if (is_entity_collision(e, e.pos.x, e.pos.y)) then
  -- TODO: hit
  sfx(sound_explosion)
  del(ents, e)
  end
  e.pos.x, e.pos.y = bulletvector(e.pos.x, e.pos.y, e.targetpos.x, e.targetpos.y)
end)

-- TODO: gunsight sway
s_sway = sys()

-- bullet drawing system.
s_drawbullet = sys({"pos", "targetpos"},
function(e)
  if (debug) then
    pset(e.targetpos.x, e.targetpos.y, 5)
  end
    --[[
  line(e.pos.x, e.pos.y, e.targetpos.x, e.targetpos.y, 5)
  pset(e.pos.x, e.pos.y, 14)
  --]]
end)

-- sprite drawing system.
s_draw = sys({"pos", "appearance"},
function(e)
  spr(e.appearance.sprite, e.pos.x, e.pos.y)
end)

-->8
-- ##################### helpers #############################################

-- checks if e would collide
-- with any entity with sprite
-- in ents.
-- e    - entity to compare
-- newx - e is going there
-- newy - e is going there
function is_entity_collision(e, newx, newy)
  -- note: performance problem
  -- when there's a lot of e's
  -- b/c we iterate all twice on
  -- every update
  for e2 in all(ents) do
    if (e != e2
    and e2.appearance
    and e2.pos
    and overlap(e, newx, newy, e2)) then
      return true
    end
  end
  return false
end

-- detect if box a and b overlap.
-- both a and b must have comps
-- appearance, pos
-- original: https://mboffin.itch.io/pico8-overlap
function overlap(a,newx,newy,b)
  assert(a.appearance)
  assert(b.appearance)
  assert(b.pos)
  return not (newx >= b.pos.x + b.appearance.w
           or newy >= b.pos.y + b.appearance.h
           or newx + a.appearance.w <= b.pos.x
           or newy + a.appearance.h <= b.pos.y)
end

-- print string x-centered
function print_xcenter(string, y, color)
  local x = str_xcenter(string)
  print(string, x, y, color)
end

-- center align string at given x coordinate
-- x defaults to 64 (screen center)
-- support for wide glyphs
-- by @sparr /pico8lib
function str_xcenter(str, x)
  local w = 0
  for i = 1, #str do
   w += (sub(str,i,i) > "\127" and 4 or 2)
  end
  return (x or 64) - w
end

-- calc next position on vector
-- from current to final pos
function bulletvector(x0, y0, x1, y1)
  -- speed per tick
  local speed = 0.8
  -- trj = trajectory
  -- trj = end_pos - start_pos
  local dx = x1 - x0
  local dy = y1 - y0
  -- distance to end_pos, c^2 = a^2 + b^2
  local dist = sqrt(dx^2 + dy^2)
  if (dist > speed) then
    local ratio = speed / dist
    local bullet_vx = dx * ratio
    local bullet_vy = dy * ratio
    xnew = bullet_vx + x0
    ynew = bullet_vy + y0
  else
    -- at the target
    xnew = x1
    ynew = y1
  end
  return xnew, ynew
end
__gfx__
00000000111111111111111100600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000001111111111c1111106660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700111111111c1c111166566000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000111111111111111164546000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000111111111111111166666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700111111111111c1c165556000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000011111111111c1c1165556000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111111111111166666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00066000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
06466460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
06455460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66455466000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66555566000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66655666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66655666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66655666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66655666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66555566000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66555566000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
06455460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
06455460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00466400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00066000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
006060000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
06000600a8a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
600000600a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
60000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
06000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00606000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0102010101010101010102010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010201010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101020101010101010101010102010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010201010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0102010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010102010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010201010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000300001465017650186501a6501b6501c6501a65015650116500a65002650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000200001a6502265025670176600a650026500165001650006500065000650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
